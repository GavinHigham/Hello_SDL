Planets:
  ☐ Parametrize:
    ☐ Radius
    ☐ Mass

  ☐ Surface trees
  ☐ Surface collision
  ☐ Frustum culling

  ☐ Variant to be used for stars up-close
  ☐ Atmosphere
    ✔ Read "Texturing and Modelling: A Procedural Approach" chapter @done (19-08-18 15:59)
    ✔ Read Alan Zucconi tutorial @done (19-08-18 15:59)
    ☐ Implement simple shader (no planet occlusion)
    ☐ Implement planet occlusion
    ☐ See if I can exploit symmetry
      ☐ See if I can integrate over entire symmetrical atmosphere planet volume
      ☐ See if I can do the atmosphere volume then subtract planet volume influence?
  ☐ Transform feedback or render-to-texture to create various surface maps, vertex texture fetch.
    ☐ Texture-space ambient occlusion
  ☐ Virtual texturing for heightmap - can I do a mip chain too? Transfer coarser tiles to different mip levels.
    Probably don't need the entire mip chain, since tiles are already subdivided by distance to camera.
  ☐ Create 
  ☐ The missing tiles may be due to floating-point precision issues.

Texture:
  ☐ Color
  ☐ Roughness
  ☐ Metalness?
  ☐ Quad-drawing module, for UI stuff and billboards.

 ECS:
   ☐ ECS component and entity pools should not need to know the type, only the size and count.
     ☐ Use "Memory pool"?
   ☐ Need a way to persist drawable information in the drawable system (ex. galaxy is drawn as an accumulating framebuffer, but galaxy's drawable component does not need to know that implementation detail)
   ☐ Properties in a component declared using X-Macros in a separate file, for serialization?
   ☐ Serialization of some things (such as OpenGL-state-referencing things) will be nontrivial.

Lua:
  ☐ Should be able to specify meter default values in a Lua file
    ☐ Should be able to save current value to a Lua file
  ☐ Could create meters in a Lua file, loaded per-module
  ☐ When ECS is more developed, describe scenes / systems / components from Lua

  ☐ Shader loading
    ☐ Declarative syntax for uniforms and attributes
    ☐ Connect uniform to particular value stored in ECS?
      ☐ Can have "pointer" to value in ECS as eid, ctype, offsetof(value)
      ☐ Can be constructed out of just the address of the value (faster with ctype):
      for ctype ∈ ctypes iff ctype[0] < address < (ctype[0] + ctype.len) then value.ctype = ctype
      value.offset (address - ctype[0]) % ctype.size
      value.index = (address - ctype[0]) - offset
      value.eid = itoh(index) (don't keep index, it's not stable)
    ☐ Automatically parse out uniforms? (See if I can find a library?)
    ☐ Enough OpenGL bindings to make scenes in Lua instead of C (Use moongl?)
    ☐ Automatic creation of sliders

Galaxy Raymarch:
  ✔ Multiple octaves of noise @done (19-01-02 00:28)
  ☐ Fractional brownian motion
  ✔ Order-independent transparency @done (19-01-02 00:28)
  ✔ Stop at certain brightness or density/occludence @done (19-01-02 00:28)
  ☐ Start rays at bounding volume
  ☐ Signed distance field optimizations?
  ☐ Use noise to adjust samples per pixel (rotate duty cycle per pixel?)
  ☐ Add S2 regions
  ☐ Alter color by location in the spiral
  ✔ Add galactic bulge @done (18-10-06 18:12)
  ☐ Add irregularity
    ☐ galaxy should be parametrized
    ☐ sample galaxy function from CPU-side to drive star generation
  ☐ Integrate into space scene
    ✔ Cubemap rendering @done (19-06-29 14:38)
    ✔ Skybox @done (19-06-29 14:38)
    ☐ Render accurately by camera position
    ☐ Render new frames when camera moves
  ✔ Render into cubemap of configurable size @done (19-01-02 00:28)
  ☐ Refactor meter creation code, list of names, list of default values, list of targets
  ☐ Move tweaks into single structure
  ☐ Density should probably not be linearly correlated with both absorption and emission
  ☐ Create manual galaxy-move / galaxy-rotate controls (could go in the controllable component of the galaxy entity?)
  ☐ Instead of directly rendering into a single accumulation cubemap, ping-pong back and forth. In a shader, read the previous as a texture, and use a "delta" rotation matrix to do better temporal antialiasing. (Maybe not useful if I'm only doing translations within the volume for the actual galaxy implementations)
  ☐ Test galaxy density function CPU-side, generating a volumetric texture to raymarch (can do coarse-grain volume texture, fine-grain noise)
    ☐ Also implement navier-stokes and test a bit of fluid sim on the volume
    ☐ Also generate small number of "guide stars" positioned based on density
    ☐ Also generate a large number of stars and run an n-body simulation to get a more realistic spiral
    ☐ Also, could render 2D texture slices on GPU
   ☐ Better spiral, look up real values

Trackball:
  ☐ Fix gimbal lock issue

Cleanup:
  ☐ Add to the include paths in each .mk file, so I can make my include statements shorter.
  ☐ Clean up and modernize the erosion code
  ☐ Replace "buffer_group" with some sort of mesh representation, which has configurable vertex channels, and can dump to interleaved or separate VBOs
  ☐ Move stray files from root directory into folders
  ☐ Move to a src / bin style?
  ☐ Remove old configuration file code (but stash it away somewhere for reference)
  ☐ While dragging a meter, should not affect trackball (even if mouse is no longer within meter)
  ☐ Tidy meter module
  ☐ Break text rendering into its own module
  ☐ Make quadtree and octree intrusive, to reduce allocations.
  ☐ Remove dependency on ceffectpp, or convert it to a script
  ☐ Use GLAD instead of GLEW
  ☐ Remove test code on release build

Ideas:
  ☐ Voronoi-based continents
  ☐ Random-walk based continents / rivers
  ☐ Subdivide denauley-triangulation of voronoi to produce interesting mesh?
  ☐ Add voronoi points to increase samples?
  ☐ Graph-based diffusion-limited aggregation, to determine the ridgelines of mountains (can I fill in the intermediate areas?)
  ☐ Find coastlines first, fill in continents from there
  ☐ Use noise function to determine "bumpiness" over the surface, increase sample points in bumpy areas.
  ☐ Use tiling textures instead of noise functions. Can use GitHub tool to generate them, or alter the simplex noise implementation to wrap where I expect it.
    ✔ Try triplanar texturing @done (18-07-16 22:42)

Various:
  ☐ Implement a simple form of scheduling for the tree subdivision and buffering.
  ☐ Add some simple texturing
  ☐ Implement ping-pong frame buffer blur / bloom
  ☐ Limit max speed on ship, implement non-realistic but fun control
  ☐ Sky simulation
  ☐ Asteroid impact simulation

  ☐ Try lifting single verts on a terrain piece and making them green for simple forest stand-in? Could be combined with a simple directional blur or distortion to disguise the trick.

  ☐ Cloud layers using alpha-transparent dynamic mesh spheres

  ☐ Refresh my memory on OpenGL streaming best-practices

  ☐ Clouds defined as 3D density function, draw by 3D-dithering, then blue noise and temporal antialiasing
    ☐ Actually seems to be very similar to what I'm doing with the galaxies

  ☐ Re-work camera controls

  ☐ Model pre-process should determine what type each mesh is, and possibly generate missing data if needed.

  ☐ Add stb_truetype, for better text.

  ☐ Rework "drawable" component.