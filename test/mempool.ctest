#include "test/test_main.h"
#include "datastructures/mempool.h"
#include "string.h"

int mempool_test1()
{
	int nf = 0; //Number of failures

	// //Create a new mempool that holds "num" items of "size" size (in bytes). 
	// struct mempool mempool_new(size_t num, size_t size);
	// //Delete a mempool.
	// void mempool_delete(struct mempool *m);
	// //Copy an item into the mempool, return a pointer to the location at which it was inserted.
	// void * mempool_add(struct mempool *m, void *item);
	// //Remove an item from the mempool. Return the old index of the pool item that overwrites it.
	// //If pointers to the moved item are updated before pointers to the old item are set to NULL,
	// //it handles the case where the item was the last one in the pool (the item "overwrites itself" before deletion).
	// int mempool_remove(struct mempool *m, int i);
	// //Returns a pointer to the i-th item in the mempool.
	// void * mempool_get(struct mempool *m, int i);

	int numbers[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
	struct mempool m = mempool_new(LENGTH(numbers), sizeof(int));
	struct mempool *M = &m;
	for (int i = 0; i < LENGTH(numbers); i++)
		mempool_add(M, &numbers[i]);

	//Numbers added in order
	TEST_SOFT_ASSERT(nf, memcmp(numbers, M->pool, sizeof(numbers)))
	//2nd removed, replaced with 10th
	mempool_remove(M, 1);
	TEST_SOFT_ASSERT(nf, &numbers[9] == mempool_get(M, 1))
	TEST_SOFT_ASSERT(nf, M->num == LENGTH(numbers) - 1)

	mempool_delete(M);
	return nf;
}